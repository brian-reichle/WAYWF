<#+
// Copyright (c) Brian Reichle.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
IDictionary<Type, string> shortNameLookup = new Dictionary<Type, string>()
{
	{ typeof(bool),    "bool"    },
	{ typeof(char),    "char"    },
	{ typeof(sbyte),   "sbyte"   },
	{ typeof(short),   "short"   },
	{ typeof(int),     "int"     },
	{ typeof(long),    "long"    },
	{ typeof(byte),    "byte"    },
	{ typeof(ushort),  "ushort"  },
	{ typeof(uint),    "uint"    },
	{ typeof(ulong),   "ulong"   },
	{ typeof(float),   "float"   },
	{ typeof(double),  "double"  },
	{ typeof(decimal), "decimal" },
	{ typeof(object),  "object"  },
	{ typeof(string),  "string"  },
};

IDictionary<Type, string> elementTypes = new Dictionary<Type, string>()
{
	{ typeof(void),           "ELEMENT_TYPE_VOID"       },
	{ typeof(bool),           "ELEMENT_TYPE_BOOLEAN"    },
	{ typeof(char),           "ELEMENT_TYPE_CHAR"       },
	{ typeof(sbyte),          "ELEMENT_TYPE_I1"         },
	{ typeof(short),          "ELEMENT_TYPE_I2"         },
	{ typeof(int),            "ELEMENT_TYPE_I4"         },
	{ typeof(long),           "ELEMENT_TYPE_I8"         },
	{ typeof(IntPtr),         "ELEMENT_TYPE_I"          },
	{ typeof(byte),           "ELEMENT_TYPE_U1"         },
	{ typeof(ushort),         "ELEMENT_TYPE_U2"         },
	{ typeof(uint),           "ELEMENT_TYPE_U4"         },
	{ typeof(ulong),          "ELEMENT_TYPE_U8"         },
	{ typeof(UIntPtr),        "ELEMENT_TYPE_U"          },
	{ typeof(float),          "ELEMENT_TYPE_R4"         },
	{ typeof(double),         "ELEMENT_TYPE_R8"         },
	{ typeof(TypedReference), "ELEMENT_TYPE_TYPEDBYREF" },
	{ typeof(object),         "ELEMENT_TYPE_OBJECT"     },
	{ typeof(string),         "ELEMENT_TYPE_STRING"     },
};

IEnumerable<Type> knownValueTypes = new[]
{
	typeof(bool), typeof(char),
	typeof(sbyte), typeof(short), typeof(int), typeof(long), typeof(IntPtr),
	typeof(byte), typeof(ushort), typeof(uint), typeof(ulong), typeof(UIntPtr),
	typeof(float), typeof(double), typeof(decimal),
	typeof(Guid),
};
#>
