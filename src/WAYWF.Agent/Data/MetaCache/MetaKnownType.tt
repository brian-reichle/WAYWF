// Copyright (c) Brian Reichle.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.
<#@template language="C#" #>
<#@output extension=".g.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;

namespace WAYWF.Agent.MetaCache
{
	internal unsafe partial class MetaKnownType
	{
<#
foreach (var type in knownValueTypes)
{
	string shortName;

	if (!shortNameLookup.TryGetValue(type, out shortName))
	{
		shortName = type.Name;
	}

#>
		public static readonly MetaKnownType <#=type.Name#> = new MetaKnownType(MetaKnownTypeCode.<#=type.Name#>, "<#=type.FullName#>", sizeof(<#=shortName#>));
<#
}

foreach (var type in unmarshalableTypes)
{
#>
		public static readonly MetaKnownType <#=type.Name#> = new MetaKnownType(MetaKnownTypeCode.<#=type.Name#>, "<#=type.FullName#>", 0);
<#
}
#>

		static readonly Dictionary<string, MetaKnownType> _lookup = new Dictionary<string, MetaKnownType>()
		{
<#
foreach (var type in knownValueTypes.Concat(unmarshalableTypes))
{
#>
			{ <#=type.Name#>.Name, <#=type.Name#> },
<#
}
#>
		};
	}
}
<#+
IDictionary<Type, string> shortNameLookup = new Dictionary<Type, string>()
{
	{ typeof(bool),    "bool"    },
	{ typeof(char),    "char"    },
	{ typeof(sbyte),   "sbyte"   },
	{ typeof(short),   "short"   },
	{ typeof(int),     "int"     },
	{ typeof(long),    "long"    },
	{ typeof(byte),    "byte"    },
	{ typeof(ushort),  "ushort"  },
	{ typeof(uint),    "uint"    },
	{ typeof(ulong),   "ulong"   },
	{ typeof(float),   "float"   },
	{ typeof(double),  "double"  },
	{ typeof(decimal), "decimal" },
	{ typeof(object),  "object"  },
	{ typeof(string),  "string"  },
};

IEnumerable<Type> knownValueTypes = new[]
{
	typeof(bool), typeof(char),
	typeof(sbyte), typeof(short), typeof(int), typeof(long), typeof(IntPtr),
	typeof(byte), typeof(ushort), typeof(uint), typeof(ulong), typeof(UIntPtr),
	typeof(float), typeof(double), typeof(decimal),
	typeof(Guid),
};

IEnumerable<Type> unmarshalableTypes = new[]
{
	typeof(void),
	typeof(object),
	typeof(TypedReference),
	typeof(string),
};
#>
